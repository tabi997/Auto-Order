datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String   // hashed
  role      String   @default("VIEWER") // ADMIN, EDITOR, VIEWER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessions  Session[]
  changes   AuditLog[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Listing {
  id          String   @id @default(cuid())
  title       String
  brand       String
  model       String
  year        Int
  priceEur    Int
  km          Int
  fuel        String   // Benzina, Diesel, Hybrid, Electric
  gearbox     String   // Automata, Manuala
  body        String   // SUV, Sedan, Hatchback, Break, Coupe, MPV, Pickup, Alt
  country     String
  type        String   @default("BUY_NOW") // BUY_NOW, AUCTION
  status      String   @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED, SOLD
  shortDesc   String?
  coverUrl    String?  // imagine locală încărcată de noi (opțional)
  sourceUrl   String?  // link Openlane / altă sursă
  sourceName  String?  // „Openlane", „BCA", etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  images      Image[]
  changes     AuditLog[]

  @@unique([title, brand, model])
}

model Image {
  id        String   @id @default(cuid())
  listingId String
  url       String
  alt       String?
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(cuid())
  listingId String?
  listing   Listing? @relation(fields: [listingId], references: [id])
  actorId   String?
  actor     User?    @relation(fields: [actorId], references: [id])
  action    String
  data      String?  // JSON string for SQLite compatibility
  createdAt DateTime @default(now())
}
